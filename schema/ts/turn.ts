// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.4
// source: turn.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Location } from "./location";

export interface Turn {
  agentId: number;
  energyLevel: number;
  stepsTaken: number;
  loc: Location | undefined;
  commands: string[];
}

function createBaseTurn(): Turn {
  return { agentId: 0, energyLevel: 0, stepsTaken: 0, loc: undefined, commands: [] };
}

export const Turn: MessageFns<Turn> = {
  encode(message: Turn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentId !== 0) {
      writer.uint32(8).int32(message.agentId);
    }
    if (message.energyLevel !== 0) {
      writer.uint32(16).int32(message.energyLevel);
    }
    if (message.stepsTaken !== 0) {
      writer.uint32(24).int32(message.stepsTaken);
    }
    if (message.loc !== undefined) {
      Location.encode(message.loc, writer.uint32(34).fork()).join();
    }
    for (const v of message.commands) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Turn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTurn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.agentId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.energyLevel = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.stepsTaken = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.loc = Location.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.commands.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Turn {
    return {
      agentId: isSet(object.agentId) ? globalThis.Number(object.agentId) : 0,
      energyLevel: isSet(object.energyLevel) ? globalThis.Number(object.energyLevel) : 0,
      stepsTaken: isSet(object.stepsTaken) ? globalThis.Number(object.stepsTaken) : 0,
      loc: isSet(object.loc) ? Location.fromJSON(object.loc) : undefined,
      commands: globalThis.Array.isArray(object?.commands) ? object.commands.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Turn): unknown {
    const obj: any = {};
    if (message.agentId !== 0) {
      obj.agentId = Math.round(message.agentId);
    }
    if (message.energyLevel !== 0) {
      obj.energyLevel = Math.round(message.energyLevel);
    }
    if (message.stepsTaken !== 0) {
      obj.stepsTaken = Math.round(message.stepsTaken);
    }
    if (message.loc !== undefined) {
      obj.loc = Location.toJSON(message.loc);
    }
    if (message.commands?.length) {
      obj.commands = message.commands;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Turn>, I>>(base?: I): Turn {
    return Turn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Turn>, I>>(object: I): Turn {
    const message = createBaseTurn();
    message.agentId = object.agentId ?? 0;
    message.energyLevel = object.energyLevel ?? 0;
    message.stepsTaken = object.stepsTaken ?? 0;
    message.loc = (object.loc !== undefined && object.loc !== null) ? Location.fromPartial(object.loc) : undefined;
    message.commands = object.commands?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
