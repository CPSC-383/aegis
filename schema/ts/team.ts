// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.4
// source: team.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export enum Team {
  GOOBS = 0,
  VOIDSEERS = 1,
  UNRECOGNIZED = -1,
}

export function teamFromJSON(object: any): Team {
  switch (object) {
    case 0:
    case "GOOBS":
      return Team.GOOBS;
    case 1:
    case "VOIDSEERS":
      return Team.VOIDSEERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Team.UNRECOGNIZED;
  }
}

export function teamToJSON(object: Team): string {
  switch (object) {
    case Team.GOOBS:
      return "GOOBS";
    case Team.VOIDSEERS:
      return "VOIDSEERS";
    case Team.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TeamInfo {
  savedAlive: number;
  savedDead: number;
  saved: number;
  predictedRight: number;
  predictedWrong: number;
  predicted: number;
  score: number;
  units: number;
  team: Team;
}

function createBaseTeamInfo(): TeamInfo {
  return {
    savedAlive: 0,
    savedDead: 0,
    saved: 0,
    predictedRight: 0,
    predictedWrong: 0,
    predicted: 0,
    score: 0,
    units: 0,
    team: 0,
  };
}

export const TeamInfo: MessageFns<TeamInfo> = {
  encode(message: TeamInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.savedAlive !== 0) {
      writer.uint32(8).int32(message.savedAlive);
    }
    if (message.savedDead !== 0) {
      writer.uint32(16).int32(message.savedDead);
    }
    if (message.saved !== 0) {
      writer.uint32(24).int32(message.saved);
    }
    if (message.predictedRight !== 0) {
      writer.uint32(32).int32(message.predictedRight);
    }
    if (message.predictedWrong !== 0) {
      writer.uint32(40).int32(message.predictedWrong);
    }
    if (message.predicted !== 0) {
      writer.uint32(48).int32(message.predicted);
    }
    if (message.score !== 0) {
      writer.uint32(56).int32(message.score);
    }
    if (message.units !== 0) {
      writer.uint32(64).int32(message.units);
    }
    if (message.team !== 0) {
      writer.uint32(72).int32(message.team);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TeamInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeamInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.savedAlive = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.savedDead = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.saved = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.predictedRight = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.predictedWrong = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.predicted = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.units = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.team = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TeamInfo {
    return {
      savedAlive: isSet(object.savedAlive) ? globalThis.Number(object.savedAlive) : 0,
      savedDead: isSet(object.savedDead) ? globalThis.Number(object.savedDead) : 0,
      saved: isSet(object.saved) ? globalThis.Number(object.saved) : 0,
      predictedRight: isSet(object.predictedRight) ? globalThis.Number(object.predictedRight) : 0,
      predictedWrong: isSet(object.predictedWrong) ? globalThis.Number(object.predictedWrong) : 0,
      predicted: isSet(object.predicted) ? globalThis.Number(object.predicted) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      units: isSet(object.units) ? globalThis.Number(object.units) : 0,
      team: isSet(object.team) ? teamFromJSON(object.team) : 0,
    };
  },

  toJSON(message: TeamInfo): unknown {
    const obj: any = {};
    if (message.savedAlive !== 0) {
      obj.savedAlive = Math.round(message.savedAlive);
    }
    if (message.savedDead !== 0) {
      obj.savedDead = Math.round(message.savedDead);
    }
    if (message.saved !== 0) {
      obj.saved = Math.round(message.saved);
    }
    if (message.predictedRight !== 0) {
      obj.predictedRight = Math.round(message.predictedRight);
    }
    if (message.predictedWrong !== 0) {
      obj.predictedWrong = Math.round(message.predictedWrong);
    }
    if (message.predicted !== 0) {
      obj.predicted = Math.round(message.predicted);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.units !== 0) {
      obj.units = Math.round(message.units);
    }
    if (message.team !== 0) {
      obj.team = teamToJSON(message.team);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TeamInfo>, I>>(base?: I): TeamInfo {
    return TeamInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TeamInfo>, I>>(object: I): TeamInfo {
    const message = createBaseTeamInfo();
    message.savedAlive = object.savedAlive ?? 0;
    message.savedDead = object.savedDead ?? 0;
    message.saved = object.saved ?? 0;
    message.predictedRight = object.predictedRight ?? 0;
    message.predictedWrong = object.predictedWrong ?? 0;
    message.predicted = object.predicted ?? 0;
    message.score = object.score ?? 0;
    message.units = object.units ?? 0;
    message.team = object.team ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
