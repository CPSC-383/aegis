// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.30.2
// source: cell.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Location } from "./common";
import { WorldObject } from "./world_object";

export enum CellType {
  NORMAL = 0,
  SPAWN = 1,
  KILLER = 2,
  CHARGING = 3,
  UNRECOGNIZED = -1,
}

export function cellTypeFromJSON(object: any): CellType {
  switch (object) {
    case 0:
    case "NORMAL":
      return CellType.NORMAL;
    case 1:
    case "SPAWN":
      return CellType.SPAWN;
    case 2:
    case "KILLER":
      return CellType.KILLER;
    case 3:
    case "CHARGING":
      return CellType.CHARGING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CellType.UNRECOGNIZED;
  }
}

export function cellTypeToJSON(object: CellType): string {
  switch (object) {
    case CellType.NORMAL:
      return "NORMAL";
    case CellType.SPAWN:
      return "SPAWN";
    case CellType.KILLER:
      return "KILLER";
    case CellType.CHARGING:
      return "CHARGING";
    case CellType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Cell {
  loc: Location | undefined;
  moveCost: number;
  type: CellType;
  agents: number[];
  layers: WorldObject[];
}

function createBaseCell(): Cell {
  return { loc: undefined, moveCost: 0, type: 0, agents: [], layers: [] };
}

export const Cell: MessageFns<Cell> = {
  encode(message: Cell, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loc !== undefined) {
      Location.encode(message.loc, writer.uint32(10).fork()).join();
    }
    if (message.moveCost !== 0) {
      writer.uint32(16).int32(message.moveCost);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    writer.uint32(34).fork();
    for (const v of message.agents) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.layers) {
      WorldObject.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cell {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.loc = Location.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.moveCost = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.agents.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.agents.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.layers.push(WorldObject.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cell {
    return {
      loc: isSet(object.loc) ? Location.fromJSON(object.loc) : undefined,
      moveCost: isSet(object.moveCost) ? globalThis.Number(object.moveCost) : 0,
      type: isSet(object.type) ? cellTypeFromJSON(object.type) : 0,
      agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e: any) => globalThis.Number(e)) : [],
      layers: globalThis.Array.isArray(object?.layers) ? object.layers.map((e: any) => WorldObject.fromJSON(e)) : [],
    };
  },

  toJSON(message: Cell): unknown {
    const obj: any = {};
    if (message.loc !== undefined) {
      obj.loc = Location.toJSON(message.loc);
    }
    if (message.moveCost !== 0) {
      obj.moveCost = Math.round(message.moveCost);
    }
    if (message.type !== 0) {
      obj.type = cellTypeToJSON(message.type);
    }
    if (message.agents?.length) {
      obj.agents = message.agents.map((e) => Math.round(e));
    }
    if (message.layers?.length) {
      obj.layers = message.layers.map((e) => WorldObject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Cell>, I>>(base?: I): Cell {
    return Cell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Cell>, I>>(object: I): Cell {
    const message = createBaseCell();
    message.loc = (object.loc !== undefined && object.loc !== null) ? Location.fromPartial(object.loc) : undefined;
    message.moveCost = object.moveCost ?? 0;
    message.type = object.type ?? 0;
    message.agents = object.agents?.map((e) => e) || [];
    message.layers = object.layers?.map((e) => WorldObject.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
