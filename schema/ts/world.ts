// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.30.2
// source: world.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Cell } from "./cell";

export interface World {
  width: number;
  height: number;
  seed: number;
  startEnergy: number;
  cells: Cell[];
  totalSurvivors: number;
}

function createBaseWorld(): World {
  return { width: 0, height: 0, seed: 0, startEnergy: 0, cells: [], totalSurvivors: 0 };
}

export const World: MessageFns<World> = {
  encode(message: World, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.seed !== 0) {
      writer.uint32(24).int32(message.seed);
    }
    if (message.startEnergy !== 0) {
      writer.uint32(32).int32(message.startEnergy);
    }
    for (const v of message.cells) {
      Cell.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.totalSurvivors !== 0) {
      writer.uint32(48).int32(message.totalSurvivors);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): World {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorld();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.seed = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startEnergy = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cells.push(Cell.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.totalSurvivors = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): World {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      seed: isSet(object.seed) ? globalThis.Number(object.seed) : 0,
      startEnergy: isSet(object.startEnergy) ? globalThis.Number(object.startEnergy) : 0,
      cells: globalThis.Array.isArray(object?.cells) ? object.cells.map((e: any) => Cell.fromJSON(e)) : [],
      totalSurvivors: isSet(object.totalSurvivors) ? globalThis.Number(object.totalSurvivors) : 0,
    };
  },

  toJSON(message: World): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.seed !== 0) {
      obj.seed = Math.round(message.seed);
    }
    if (message.startEnergy !== 0) {
      obj.startEnergy = Math.round(message.startEnergy);
    }
    if (message.cells?.length) {
      obj.cells = message.cells.map((e) => Cell.toJSON(e));
    }
    if (message.totalSurvivors !== 0) {
      obj.totalSurvivors = Math.round(message.totalSurvivors);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<World>, I>>(base?: I): World {
    return World.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<World>, I>>(object: I): World {
    const message = createBaseWorld();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.seed = object.seed ?? 0;
    message.startEnergy = object.startEnergy ?? 0;
    message.cells = object.cells?.map((e) => Cell.fromPartial(e)) || [];
    message.totalSurvivors = object.totalSurvivors ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
