// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.4
// source: game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TeamInfo } from "./team";
import { Turn } from "./turn";
import { World } from "./world";

export interface GameHeader {
  world: World | undefined;
  rounds: number;
}

export interface Round {
  round: number;
  world: World | undefined;
  turns: Turn[];
  teamInfo: TeamInfo[];
}

/** Empty message for completion event */
export interface GameFooter {
}

function createBaseGameHeader(): GameHeader {
  return { world: undefined, rounds: 0 };
}

export const GameHeader: MessageFns<GameHeader> = {
  encode(message: GameHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.world !== undefined) {
      World.encode(message.world, writer.uint32(10).fork()).join();
    }
    if (message.rounds !== 0) {
      writer.uint32(16).int32(message.rounds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.world = World.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rounds = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameHeader {
    return {
      world: isSet(object.world) ? World.fromJSON(object.world) : undefined,
      rounds: isSet(object.rounds) ? globalThis.Number(object.rounds) : 0,
    };
  },

  toJSON(message: GameHeader): unknown {
    const obj: any = {};
    if (message.world !== undefined) {
      obj.world = World.toJSON(message.world);
    }
    if (message.rounds !== 0) {
      obj.rounds = Math.round(message.rounds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameHeader>, I>>(base?: I): GameHeader {
    return GameHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameHeader>, I>>(object: I): GameHeader {
    const message = createBaseGameHeader();
    message.world = (object.world !== undefined && object.world !== null) ? World.fromPartial(object.world) : undefined;
    message.rounds = object.rounds ?? 0;
    return message;
  },
};

function createBaseRound(): Round {
  return { round: 0, world: undefined, turns: [], teamInfo: [] };
}

export const Round: MessageFns<Round> = {
  encode(message: Round, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.round !== 0) {
      writer.uint32(8).int32(message.round);
    }
    if (message.world !== undefined) {
      World.encode(message.world, writer.uint32(18).fork()).join();
    }
    for (const v of message.turns) {
      Turn.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.teamInfo) {
      TeamInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Round {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.round = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.world = World.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.turns.push(Turn.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.teamInfo.push(TeamInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Round {
    return {
      round: isSet(object.round) ? globalThis.Number(object.round) : 0,
      world: isSet(object.world) ? World.fromJSON(object.world) : undefined,
      turns: globalThis.Array.isArray(object?.turns) ? object.turns.map((e: any) => Turn.fromJSON(e)) : [],
      teamInfo: globalThis.Array.isArray(object?.teamInfo) ? object.teamInfo.map((e: any) => TeamInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: Round): unknown {
    const obj: any = {};
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.world !== undefined) {
      obj.world = World.toJSON(message.world);
    }
    if (message.turns?.length) {
      obj.turns = message.turns.map((e) => Turn.toJSON(e));
    }
    if (message.teamInfo?.length) {
      obj.teamInfo = message.teamInfo.map((e) => TeamInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Round>, I>>(base?: I): Round {
    return Round.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Round>, I>>(object: I): Round {
    const message = createBaseRound();
    message.round = object.round ?? 0;
    message.world = (object.world !== undefined && object.world !== null) ? World.fromPartial(object.world) : undefined;
    message.turns = object.turns?.map((e) => Turn.fromPartial(e)) || [];
    message.teamInfo = object.teamInfo?.map((e) => TeamInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGameFooter(): GameFooter {
  return {};
}

export const GameFooter: MessageFns<GameFooter> = {
  encode(_: GameFooter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameFooter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameFooter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GameFooter {
    return {};
  },

  toJSON(_: GameFooter): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GameFooter>, I>>(base?: I): GameFooter {
    return GameFooter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameFooter>, I>>(_: I): GameFooter {
    const message = createBaseGameFooter();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
