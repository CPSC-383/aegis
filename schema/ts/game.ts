// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "game.proto" (package "aegis", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TeamInfo } from "./team";
import { Turn } from "./turn";
import { World } from "./world";
/**
 * @generated from protobuf message aegis.GameHeader
 */
export interface GameHeader {
    /**
     * @generated from protobuf field: aegis.World world = 1
     */
    world?: World;
    /**
     * @generated from protobuf field: int32 rounds = 2
     */
    rounds: number;
}
/**
 * @generated from protobuf message aegis.Round
 */
export interface Round {
    /**
     * @generated from protobuf field: int32 round = 1
     */
    round: number;
    /**
     * @generated from protobuf field: aegis.World world = 2
     */
    world?: World;
    /**
     * @generated from protobuf field: repeated aegis.Turn turns = 3
     */
    turns: Turn[];
    /**
     * @generated from protobuf field: repeated aegis.TeamInfo team_info = 4
     */
    teamInfo: TeamInfo[];
}
/**
 * Empty message for completion event
 *
 * @generated from protobuf message aegis.GameFooter
 */
export interface GameFooter {
}
// @generated message type with reflection information, may provide speed optimized methods
class GameHeader$Type extends MessageType<GameHeader> {
    constructor() {
        super("aegis.GameHeader", [
            { no: 1, name: "world", kind: "message", T: () => World },
            { no: 2, name: "rounds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameHeader>): GameHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rounds = 0;
        if (value !== undefined)
            reflectionMergePartial<GameHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameHeader): GameHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* aegis.World world */ 1:
                    message.world = World.internalBinaryRead(reader, reader.uint32(), options, message.world);
                    break;
                case /* int32 rounds */ 2:
                    message.rounds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* aegis.World world = 1; */
        if (message.world)
            World.internalBinaryWrite(message.world, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 rounds = 2; */
        if (message.rounds !== 0)
            writer.tag(2, WireType.Varint).int32(message.rounds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.GameHeader
 */
export const GameHeader = new GameHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Round$Type extends MessageType<Round> {
    constructor() {
        super("aegis.Round", [
            { no: 1, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "world", kind: "message", T: () => World },
            { no: 3, name: "turns", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Turn },
            { no: 4, name: "team_info", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TeamInfo }
        ]);
    }
    create(value?: PartialMessage<Round>): Round {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.round = 0;
        message.turns = [];
        message.teamInfo = [];
        if (value !== undefined)
            reflectionMergePartial<Round>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Round): Round {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 round */ 1:
                    message.round = reader.int32();
                    break;
                case /* aegis.World world */ 2:
                    message.world = World.internalBinaryRead(reader, reader.uint32(), options, message.world);
                    break;
                case /* repeated aegis.Turn turns */ 3:
                    message.turns.push(Turn.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated aegis.TeamInfo team_info */ 4:
                    message.teamInfo.push(TeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Round, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 round = 1; */
        if (message.round !== 0)
            writer.tag(1, WireType.Varint).int32(message.round);
        /* aegis.World world = 2; */
        if (message.world)
            World.internalBinaryWrite(message.world, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated aegis.Turn turns = 3; */
        for (let i = 0; i < message.turns.length; i++)
            Turn.internalBinaryWrite(message.turns[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated aegis.TeamInfo team_info = 4; */
        for (let i = 0; i < message.teamInfo.length; i++)
            TeamInfo.internalBinaryWrite(message.teamInfo[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.Round
 */
export const Round = new Round$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameFooter$Type extends MessageType<GameFooter> {
    constructor() {
        super("aegis.GameFooter", []);
    }
    create(value?: PartialMessage<GameFooter>): GameFooter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameFooter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameFooter): GameFooter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameFooter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.GameFooter
 */
export const GameFooter = new GameFooter$Type();
