// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.4
// source: event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GameFooter, GameHeader, Round } from "./game";

export interface Event {
  gameHeader?: GameHeader | undefined;
  round?: Round | undefined;
  gameFooter?: GameFooter | undefined;
}

function createBaseEvent(): Event {
  return { gameHeader: undefined, round: undefined, gameFooter: undefined };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameHeader !== undefined) {
      GameHeader.encode(message.gameHeader, writer.uint32(10).fork()).join();
    }
    if (message.round !== undefined) {
      Round.encode(message.round, writer.uint32(18).fork()).join();
    }
    if (message.gameFooter !== undefined) {
      GameFooter.encode(message.gameFooter, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameHeader = GameHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.round = Round.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameFooter = GameFooter.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      gameHeader: isSet(object.gameHeader) ? GameHeader.fromJSON(object.gameHeader) : undefined,
      round: isSet(object.round) ? Round.fromJSON(object.round) : undefined,
      gameFooter: isSet(object.gameFooter) ? GameFooter.fromJSON(object.gameFooter) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.gameHeader !== undefined) {
      obj.gameHeader = GameHeader.toJSON(message.gameHeader);
    }
    if (message.round !== undefined) {
      obj.round = Round.toJSON(message.round);
    }
    if (message.gameFooter !== undefined) {
      obj.gameFooter = GameFooter.toJSON(message.gameFooter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.gameHeader = (object.gameHeader !== undefined && object.gameHeader !== null)
      ? GameHeader.fromPartial(object.gameHeader)
      : undefined;
    message.round = (object.round !== undefined && object.round !== null) ? Round.fromPartial(object.round) : undefined;
    message.gameFooter = (object.gameFooter !== undefined && object.gameFooter !== null)
      ? GameFooter.fromPartial(object.gameFooter)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
