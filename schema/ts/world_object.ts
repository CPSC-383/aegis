// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.30.2
// source: world_object.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export enum SurvivorState {
  ALIVE = 0,
  DEAD = 1,
  UNRECOGNIZED = -1,
}

export function survivorStateFromJSON(object: any): SurvivorState {
  switch (object) {
    case 0:
    case "ALIVE":
      return SurvivorState.ALIVE;
    case 1:
    case "DEAD":
      return SurvivorState.DEAD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SurvivorState.UNRECOGNIZED;
  }
}

export function survivorStateToJSON(object: SurvivorState): string {
  switch (object) {
    case SurvivorState.ALIVE:
      return "ALIVE";
    case SurvivorState.DEAD:
      return "DEAD";
    case SurvivorState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Survivor {
  id: number;
  health: number;
  state: SurvivorState;
}

export interface Rubble {
  id: number;
  energyRequired: number;
  agentsRequired: number;
}

export interface WorldObject {
  survivor?: Survivor | undefined;
  rubble?: Rubble | undefined;
}

function createBaseSurvivor(): Survivor {
  return { id: 0, health: 0, state: 0 };
}

export const Survivor: MessageFns<Survivor> = {
  encode(message: Survivor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.health !== 0) {
      writer.uint32(16).int32(message.health);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Survivor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSurvivor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.health = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Survivor {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      state: isSet(object.state) ? survivorStateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Survivor): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.health !== 0) {
      obj.health = Math.round(message.health);
    }
    if (message.state !== 0) {
      obj.state = survivorStateToJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Survivor>, I>>(base?: I): Survivor {
    return Survivor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Survivor>, I>>(object: I): Survivor {
    const message = createBaseSurvivor();
    message.id = object.id ?? 0;
    message.health = object.health ?? 0;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseRubble(): Rubble {
  return { id: 0, energyRequired: 0, agentsRequired: 0 };
}

export const Rubble: MessageFns<Rubble> = {
  encode(message: Rubble, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.energyRequired !== 0) {
      writer.uint32(16).int32(message.energyRequired);
    }
    if (message.agentsRequired !== 0) {
      writer.uint32(24).int32(message.agentsRequired);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Rubble {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRubble();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.energyRequired = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.agentsRequired = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rubble {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      energyRequired: isSet(object.energyRequired) ? globalThis.Number(object.energyRequired) : 0,
      agentsRequired: isSet(object.agentsRequired) ? globalThis.Number(object.agentsRequired) : 0,
    };
  },

  toJSON(message: Rubble): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.energyRequired !== 0) {
      obj.energyRequired = Math.round(message.energyRequired);
    }
    if (message.agentsRequired !== 0) {
      obj.agentsRequired = Math.round(message.agentsRequired);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Rubble>, I>>(base?: I): Rubble {
    return Rubble.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Rubble>, I>>(object: I): Rubble {
    const message = createBaseRubble();
    message.id = object.id ?? 0;
    message.energyRequired = object.energyRequired ?? 0;
    message.agentsRequired = object.agentsRequired ?? 0;
    return message;
  },
};

function createBaseWorldObject(): WorldObject {
  return { survivor: undefined, rubble: undefined };
}

export const WorldObject: MessageFns<WorldObject> = {
  encode(message: WorldObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.survivor !== undefined) {
      Survivor.encode(message.survivor, writer.uint32(10).fork()).join();
    }
    if (message.rubble !== undefined) {
      Rubble.encode(message.rubble, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorldObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorldObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.survivor = Survivor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rubble = Rubble.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorldObject {
    return {
      survivor: isSet(object.survivor) ? Survivor.fromJSON(object.survivor) : undefined,
      rubble: isSet(object.rubble) ? Rubble.fromJSON(object.rubble) : undefined,
    };
  },

  toJSON(message: WorldObject): unknown {
    const obj: any = {};
    if (message.survivor !== undefined) {
      obj.survivor = Survivor.toJSON(message.survivor);
    }
    if (message.rubble !== undefined) {
      obj.rubble = Rubble.toJSON(message.rubble);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorldObject>, I>>(base?: I): WorldObject {
    return WorldObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorldObject>, I>>(object: I): WorldObject {
    const message = createBaseWorldObject();
    message.survivor = (object.survivor !== undefined && object.survivor !== null)
      ? Survivor.fromPartial(object.survivor)
      : undefined;
    message.rubble = (object.rubble !== undefined && object.rubble !== null)
      ? Rubble.fromPartial(object.rubble)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
