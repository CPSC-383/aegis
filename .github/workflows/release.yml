name: Build and Release Aegis Clients

on:
  push:
    tags:
      - "v*.*.*-*"

jobs:
  build-electron:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
            path: "mac-universal/*.app"
          - os: "ubuntu-22.04"
            platform: linux
            path: "*.AppImage"
          - os: windows-latest
            platform: win
            path: "*.exe"
    env:
      NODE_VERSION: "20"
      WORKING_DIR: ./client
      ARTIFACT_PATH: "./packed-client/${{ matrix.path }}"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm install

      - name: Build app
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [[ "${{ github.ref_name }}" == *"-a1" ]]; then
            npm run build:pack:a1
          else
            npm run build:pack
          fi
        shell: bash

      - name: Create ZIP archive
        working-directory: ${{ env.WORKING_DIR }}
        run: 7z a packed-client/${{ matrix.platform }}-electron.zip ${{ env.ARTIFACT_PATH }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-electron
          path: ${{ env.WORKING_DIR }}/packed-client/*.zip

  build-tauri:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
            target: "universal-apple-darwin"
            path: "bundle/macos/*.app"
          - os: "ubuntu-22.04"
            platform: linux
            target: "x86_64-unknown-linux-gnu"
            path: "bundle/appimage/*.AppImage"
          - os: windows-latest
            platform: win
            target: "x86_64-pc-windows-msvc"
            path: "*.exe"
    env:
      ARTIFACT_PATH: "./src-tauri/target/${{ matrix.target }}/release/${{ matrix.path }}"
      WORKING_DIR: "./client-tauri"
      DENO_VERSION: "v2.x"
      ARGS: "--target ${{ matrix.target }}"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Install MacOS dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          rustup target add x86_64-apple-darwin

      - name: Install Linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install packages
        run: deno install
        working-directory: ${{ env.WORKING_DIR }}

      - name: Build app
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [[ "${{ github.ref_name }}" == *"-a1" ]]; then
            deno task build:a1 ${{ env.ARGS }}
          else
            deno task build:a3 ${{ env.ARGS }}
          fi
        shell: bash

      - name: Create ZIP archive
        working-directory: ${{ env.WORKING_DIR }}
        run: 7z a packed-client/${{ matrix.platform }}-tauri.zip ${{ env.ARTIFACT_PATH }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-tauri
          path: ${{ env.WORKING_DIR }}/packed-client/*.zip

  release:
    needs: [build-electron, build-tauri]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean client directory
        run: |
          rm -rf client
          rm -rf client-tauri
          mkdir client

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      - name: Setup version-specific files
        run: |
          # Select correct requirements file
          if [[ "${{ github.ref_name }}" == *"-a1" ]]; then
            cp requirements-a1.txt requirements.txt
          else
            cp requirements-a3.txt requirements.txt
          fi
          rm requirements-a1.txt requirements-a3.txt

          # Update imports for A1 if needed
          if [[ "${{ github.ref_name }}" == *"-a1" ]]; then
            find ./src/aegis -type f \
              -not -path "*/__pycache__/*" \
              -not -path "*/agent_predictions/*" \
              -exec grep -l "a3" {} + | xargs sed -i 's/a3/a1/g'
            grep -lrw "PREDICT" ./src/aegis --include="__init__.py" | xargs sed -i '/PREDICT/d'
          fi

      - name: Update world files
        run: |
          VERSION=$(if [[ "${{ github.ref_name }}" == *"-a1" ]]; then echo "a1"; else echo "a3"; fi)
          find ./worlds -mindepth 1 \
            -not -path "*/${VERSION}-assignment-worlds/*" \
            -not -path "*/${VERSION}-assignment-worlds" \
            -delete
          mv ./worlds/${VERSION}-assignment-worlds/* ./worlds/
          rm -rf ./worlds/${VERSION}-assignment-worlds

      - name: Update agent files
        run: |
          VERSION=$(if [[ "${{ github.ref_name }}" == *"-a1" ]]; then echo "a1"; else echo "a3"; fi)
          find ./src/agents -mindepth 1 \
            -not -path "*/example_agent_${VERSION}/*" \
            -not -path "*/example_agent_${VERSION}" \
            -delete

      - name: Cleanup extra files
        run: |
          # Remove version-specific directories
          if [[ "${{ github.ref_name }}" == *"-a1" ]]; then
            rm -rf ./src/a3
            rm sys_files/*.npy
          else
            rm -rf ./src/a1
          fi

          # Remove development files
          rm -rf .git .github ./docs scripts .gitignore README.md

      - name: Create Electron zip
        run: |
          mkdir -p temp_electron/client

          for platform in mac linux win; do
            mkdir -p "temp_electron/client/${platform}-client"
            cp "artifacts/${platform}-electron/"* "temp_electron/client/${platform}-client/${platform}-client.zip"
          done

          cp -r src worlds sys_files run.py setup.py requirements.txt temp_electron/
          cd temp_electron
          zip -r ../aegis-electron.zip .

      - name: Create Tauri zip
        run: |
          mkdir -p temp_tauri/client

          for platform in mac linux win; do
            mkdir -p "temp_tauri/client/${platform}-client"
            cp "artifacts/${platform}-tauri/"* "temp_tauri/client/${platform}-client/${platform}-client.zip"
          done

          cp -r src worlds sys_files run.py setup.py requirements.txt temp_tauri/
          cd temp_tauri
          zip -r ../aegis-tauri.zip .

      - name: Create Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: aegis-*.zip
          tag: ${{ github.ref_name }}
          release_name: "Aegis clients for version ${{ github.ref_name }}"
