---
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import DocsLayout from "@/layouts/DocsLayout.astro";
import Method from "@/components/Method";
import Attribute from "@/components/Attribute";

interface Props {
  doc: CollectionEntry<"docs">;
}

export async function getStaticPaths() {
  const docs = await getCollection("docs");

  return docs.map((doc) => ({
    params: { id: doc.id },
    props: { doc },
  }));
}

const { doc } = Astro.props;
const { Content, headings } = await render(doc);

const docs = await getCollection("docs");

const groupedDocs = docs.reduce(
  (acc, doc) => {
    const section = doc.id.split("/")[0];

    if (!acc[section]) {
      acc[section] = [];
    }

    acc[section].push(doc);

    return acc;
  },
  {} as Record<string, CollectionEntry<"docs">[]>,
);
---

<DocsLayout headings={headings} groupedDocs={groupedDocs} {...doc.data}>
  <Content components={{ Method, Attribute }} />
</DocsLayout>
