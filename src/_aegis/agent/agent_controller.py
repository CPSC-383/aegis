from __future__ import annotations

from typing import Protocol, runtime_checkable

from _aegis.agent.agent_states import AgentStates
from _aegis.common.agent_id import AgentID
from _aegis.common.commands.agent_command import AgentCommand
from _aegis.common.location import Location


@runtime_checkable
class AgentController(Protocol):
    """Protocol defining the interface for agent operations."""

    def get_round_number(self) -> int: ...
    def get_agent_id(self) -> AgentID: ...
    def get_location(self) -> Location: ...
    def get_energy_level(self) -> int: ...
    def send(self, command: AgentCommand) -> None: ...
    def log(self, message: str) -> None: ...
    def set_agent_state(self, state: AgentStates) -> None: ...
    def set_agent_id(self, agent_id: AgentID) -> None: ...
    def set_energy_level(self, energy_level: int) -> None: ...
    def set_location(self, location) -> None: ...
    # def add_prediction_info(
    #     self, info: tuple[int, NDArray[np.float32] | None, NDArray[np.int64] | None]
    # ) -> None: ...
    def update_surround(self, surround_info, world: World | None) -> None: ...
