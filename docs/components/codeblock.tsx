"use client"
import { Check, Copy, Terminal, Code } from "lucide-react"
import {
  type ComponentProps,
  createContext,
  type HTMLAttributes,
  type ReactNode,
  type RefObject,
  useContext,
  useMemo,
  useRef,
} from "react"
import { cn } from "../lib/cn"
import { useCopyButton } from "fumadocs-ui/utils/use-copy-button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./tabs.unstyled"
import { mergeRefs } from "../lib/merge-refs"

export interface CodeBlockProps extends ComponentProps<"figure"> {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode
  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean
  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean
  viewportProps?: HTMLAttributes<HTMLElement>
  /**
   * show line numbers
   */
  "data-line-numbers"?: boolean
  /**
   * @defaultValue 1
   */
  "data-line-numbers-start"?: number
  Actions?: (props: { className?: string; children?: ReactNode }) => ReactNode
}

const TabsContext = createContext<{
  containerRef: RefObject<HTMLDivElement | null>
  nested: boolean
} | null>(null)

export function Pre(props: ComponentProps<"pre">) {
  return (
    <pre
      {...props}
      className={cn(
        "min-w-full w-max *:flex *:flex-col bg-slate-900/80 text-cyan-300",
        props.className
      )}
    >
      {props.children}
    </pre>
  )
}

export function CodeBlock({
  ref,
  title,
  allowCopy,
  keepBackground = false,
  icon,
  viewportProps = {},
  children,
  Actions = (props) => (
    <div {...props} className={cn("empty:hidden", props.className)} />
  ),
  ...props
}: CodeBlockProps) {
  const isTab = useContext(TabsContext) !== null
  const areaRef = useRef<HTMLDivElement>(null)
  allowCopy ??= !isTab

  const bg = cn(
    "bg-slate-900/80 backdrop-blur-sm",
    keepBackground && "bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)"
  )

  return (
    <figure
      ref={ref}
      dir="ltr"
      {...props}
      className={cn(
        isTab
          ? [bg, "rounded-lg shadow-lg shadow-cyan-500/10"]
          : "my-6 rounded-xl bg-slate-900/70 backdrop-blur-sm p-1 border border-cyan-500/30",
        "shiki relative border-cyan-500/20 outline-none not-prose overflow-hidden text-sm shadow-lg shadow-cyan-500/5",
        props.className
      )}
    >
      {title ? (
        <div
          className={cn(
            "flex items-center gap-3 px-4 h-12 bg-slate-800/80 backdrop-blur-sm border-b border-cyan-500/30",
            "text-cyan-300 font-mono",
            isTab && "border-b border-cyan-500/20"
          )}
        >
          <div className="flex items-center gap-2">
            <div className="flex gap-1.5">
              <div className="w-3 h-3 rounded-full bg-red-400/80" />
              <div className="w-3 h-3 rounded-full bg-yellow-400/80" />
              <div className="w-3 h-3 rounded-full bg-green-400/80" />
            </div>
            <div className="w-px h-6 bg-cyan-500/30 mx-1" />
          </div>

          {typeof icon === "string" ? (
            <div
              className="[&_svg]:size-4 text-cyan-400"
              dangerouslySetInnerHTML={{
                __html: icon,
              }}
            />
          ) : (
            icon || <Terminal className="w-4 h-4 text-cyan-400" />
          )}

          <figcaption className="flex-1 truncate text-cyan-200 font-medium">
            {title}
          </figcaption>

          <div className="flex items-center gap-2 text-xs">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
            <span className="text-green-400 font-mono">ACTIVE</span>
          </div>

          {Actions({
            children: allowCopy && <CopyButton containerRef={areaRef} />,
          })}
        </div>
      ) : (
        Actions({
          className: cn(
            "absolute top-2 right-2 z-10 rounded-lg",
            "text-cyan-300 hover:bg-slate-700/90 transition-colors"
          ),
          children: allowCopy && <CopyButton containerRef={areaRef} />,
        })
      )}

      <div
        ref={areaRef}
        {...viewportProps}
        className={cn(
          !isTab && [bg, "rounded-lg border-0"],
          "text-[13px] py-4 px-4 overflow-auto max-h-[600px] fd-scroll-container",
          "scrollbar-thin scrollbar-track-slate-800/50 scrollbar-thumb-cyan-500/30",
          viewportProps.className
        )}
        style={
          {
            "--padding-right": !title ? "calc(var(--spacing) * 10)" : undefined,
            counterSet: props["data-line-numbers"]
              ? `line ${Number(props["data-line-numbers-start"] ?? 1) - 1}`
              : undefined,
            ...viewportProps.style,
          } as object
        }
      >
        {children}
      </div>

      <div className="absolute inset-0 pointer-events-none opacity-5 bg-gradient-to-r from-cyan-500/10 via-transparent to-blue-500/10 rounded-xl" />
    </figure>
  )
}

function CopyButton({
  className,
  containerRef,
  ...props
}: ComponentProps<"button"> & {
  containerRef: RefObject<HTMLElement | null>
}) {
  const [checked, onClick] = useCopyButton(() => {
    const pre = containerRef.current?.getElementsByTagName("pre").item(0)
    if (!pre) return
    const clone = pre.cloneNode(true) as HTMLElement
    clone.querySelectorAll(".nd-copy-ignore").forEach((node) => {
      node.replaceWith("\n")
    })
    void navigator.clipboard.writeText(clone.textContent ?? "")
  })

  return (
    <button
      type="button"
      className={cn(
        "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors",
        "h-6 w-6 hover:bg-slate-700/50 text-cyan-300 hover:text-cyan-200",
        "border border-cyan-500/30 hover:border-cyan-400/50",
        "[&_svg]:size-4",
        className
      )}
      aria-label={checked ? "Code Copied to Buffer" : "Copy Code to Buffer"}
      onClick={onClick}
      {...props}
    >
      {checked ? (
        <Check className="text-green-400" />
      ) : (
        <Copy className="text-cyan-400" />
      )}
    </button>
  )
}

export function CodeBlockTabs({ ref, ...props }: ComponentProps<typeof Tabs>) {
  const containerRef = useRef<HTMLDivElement>(null)
  const nested = useContext(TabsContext) !== null

  return (
    <Tabs
      ref={mergeRefs(containerRef, ref)}
      {...props}
      className={cn(
        "bg-slate-900/70 backdrop-blur-sm border border-cyan-500/30 rounded-xl overflow-hidden shadow-lg shadow-cyan-500/10",
        !nested && "my-6",
        props.className
      )}
    >
      <TabsContext.Provider
        value={useMemo(
          () => ({
            containerRef,
            nested,
          }),
          [nested]
        )}
      >
        {props.children}
      </TabsContext.Provider>
    </Tabs>
  )
}

export function CodeBlockTabsList(props: ComponentProps<typeof TabsList>) {
  const { containerRef, nested } = useContext(TabsContext)!

  return (
    <div className="bg-slate-800/80 backdrop-blur-sm border-b border-cyan-500/30 px-4 py-2">
      <TabsList
        {...props}
        className={cn(
          "flex flex-row overflow-x-auto px-0 -mx-0 text-slate-400",
          props.className
        )}
      >
        {props.children}
        {!nested && (
          <CopyButton
            className="sticky ml-auto right-0 bg-slate-800/90 backdrop-blur-sm"
            containerRef={containerRef}
          />
        )}
      </TabsList>
    </div>
  )
}

export function CodeBlockTabsTrigger({
  children,
  ...props
}: ComponentProps<typeof TabsTrigger>) {
  return (
    <TabsTrigger
      {...props}
      className={cn(
        "relative group inline-flex text-sm font-mono text-nowrap items-center gap-2 px-3 py-2",
        "text-slate-400 hover:text-cyan-300 data-[state=active]:text-cyan-300",
        "rounded-md transition-colors",
        "[&_svg]:size-4",
        props.className
      )}
    >
      <div className="absolute inset-x-1 bottom-0 h-0.5 group-data-[state=active]:bg-cyan-400 rounded-full" />
      <Code className="w-3 h-3" />
      {children}
    </TabsTrigger>
  )
}

// TODO: currently Vite RSC plugin has problem with adding `asChild` here, maybe revisit this in future
export const CodeBlockTab = TabsContent
